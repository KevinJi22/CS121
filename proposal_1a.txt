Team: MKW
Members: Kevin Ji, Melody Zhao, Wayne Ying
Project: 1D - Final Proposal
Product proposal: https:/github.com/KevinJi22/CS121/proposal.txt
Primary author: Wayne

Grutoring is a fundamental component of the learning experience at Harvey Mudd College, and professors and grutors make a lot of effort in improving the grutoring experience. During the ongoing pandemic, grutoring efforts have become completely remote. As grutors, we have found grutoring remotely to be much more inconvenient than in-person. In CS60, grutors must check Piazza for unresolved questions and either reply through the post or request a Zoom meeting. Furthermore, in CS70, grutors must repeatedly check a Google sheet which updates with student responses to see if anyone needs help. These current methods waste time for both students and grutors â€” neither is notified when a response from the other party comes and the system for answering questions is manually implemented and could be more efficient. 
We will develop a web application for grutoring that students use to request help and grutors use to manage students. There will be two web interfaces: an interface for students to submit their question, where they will input their name, question, and meeting link (Zoom, Google Meet, etc) in a form, and an interface for the grutors where they can see all pending student questions. After submitting, they will be placed in a queue, and the student interface will display the number of students ahead of them along with the time the student has been waiting, giving them a visual indication of how long they should wait. The grutor interface will have a list of students waiting, and each time a student is helped, the application will automatically remove them from the front of the queue. This makes managing students more efficient than using Google Sheets or Piazza. 
We will design chat rooms using React components and the Stream Chat API for students to get help from peers when grutors are not yet available. The students and grutors will be able to freely explore a list of chat rooms currently available for different classes and join. Thereon, students can discuss questions they have and help each other based on what they already know and grutors will also be able to check in to answer any unanswered questions. There will be two notification options for when a grutor is free to help the student at the top of the queue and when students are added to the queue. Grutors and students can select to get pop-ups in their browser or SMS notifications, for which we will use the Twilio API. Students and grutors would both get notifications and join the same Zoom/Google Meet room. Using the information stored in the database, we can also use data analytical tools such as the Azure Application Insights API to compute the average number of students and student wait time per shift, which students can use to inform which grutoring shifts they go to. This information can be reported toward professors so that they can make adjustments to the amount of grutors available. 
Our web application will provide a more efficient method for facilitating remote grutoring and serves as a better communication service between students and grutors. To do this, we will leverage available APIs and services mentioned previously to build our platform. Finally, this web application has the potential to be adopted by other departments beyond computer science and be utilized during non-remote circumstances, making the product a valuable asset for the Harvey Mudd community. This would be fun because it is directly related to the work we do and would help us learn new languages and frameworks.
